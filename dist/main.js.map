{"version":3,"file":"main.js","mappings":"mBAIO,SAASA,EAASC,GAUrB,MAAO,CAACC,UAAYD,EAAME,aALR,EAMtB,CAEO,MAAMC,EAAmB,WAE5B,IAAIC,EAAa,GAOjB,MAAO,CAACC,IANKC,GAASF,EAAWG,KAAKD,GAMzBE,OALGF,GAASF,EACrBK,OAAOL,EAAWM,QAAQJ,GAAM,GAIfK,MAFP,IAAMC,QAAQC,MAAMT,GAENA,aAC7B,CAV6B,GCbzB,SAASU,IAEZ,MAAMC,EAAgB,GAChBC,EAAW,GAEjB,IAAK,IAAIV,KAAQH,EAAiBC,WACzBE,EAAKJ,aAAac,EAAST,KAAKD,GACjCA,EAAKJ,aAAaa,EAAcR,KAAKD,GAG7C,MAAMW,EAAcC,SAASC,cAAc,SAG3C,SAASC,EAAUC,GACf,IAAK,IAAIf,KAAQe,EAAK,CAClB,MAAMC,EAAUJ,SAASC,cAAc,MACjCI,EAAWL,SAASC,cAAc,MAGlCK,EAAcN,SAASC,cAAc,MAC3CK,EAAYC,UAAYnB,EAAKN,KAG7BsB,EAAQI,YAAYH,GACpBD,EAAQI,YAAYF,GACpBP,EAAYS,YAAYJ,EAC5B,CACJ,CAhBAL,EAAYU,aAAa,KAAK,aAkB9BP,EAAUJ,GACVI,EAAUL,EACd,CAEO,SAASa,IACZ,MAAMX,EAAcC,SAASW,eAAe,aACxCZ,IACAA,EAAYa,kBACZb,EAAYT,SAEpB,CCxCO,SAASuB,IAEZ,MAAMC,EAAUd,SAASW,eAAe,WAElCI,EAAcf,SAASC,cAAc,QAC3Cc,EAAYN,aAAa,KAAK,QAC9BM,EAAYC,MAAMC,QAAU,kFAG5B,MAAMC,EAAcrC,EAAQ,WAC5B,IAAK,IAAIsC,KAAOD,EAAa,CAEzB,GAAiD,SAA7CC,EAAIC,UAAUD,EAAIE,OAAS,EAAGF,EAAIE,QAAoB,SAE1D,MAAMC,EAAetB,SAASC,cAAc,SAC5CqB,EAAab,aAAa,KAAMU,GAChCG,EAAaN,MAAMC,QAAU,eAC7BF,EAAYP,YAAYc,GAExB,MAAMC,EAAevB,SAASC,cAAc,SAC5CsB,EAAaP,MAAMC,QAAU,eAC7BM,EAAahB,UAAYY,CAC7B,CAEA,MAAMK,EAAexB,SAASC,cAAc,UAC5CuB,EAAaf,aAAa,KAAM,iBAChCe,EAAajB,UAAY,eACzBiB,EAAaR,MAAMC,QAAU,eAE7BF,EAAYP,YAAYgB,GAExBV,EAAQN,YAAYO,EACxB,CAEO,SAASU,IACZ,MAAMC,EAAc1B,SAASW,eAAe,QACvCe,IAELA,EAAYd,kBACZc,EAAYpC,SAChB,CCvCAuB,IACAjB,IAEsBI,SAASW,eAAe,iBACjCgB,iBAAiB,SAAS,SAASC,GAC5CA,EAAMC,iBDqCH,WACH,MACMC,EAAUjD,EADImB,SAASW,eAAe,QACR5B,UAAUgD,OAE9C9C,EAAiBE,IAAI2C,GACrB7C,EAAiBQ,QAEjBgC,IACAZ,IAEAH,IACAd,GACJ,CC/CIoC,GACAP,IACAZ,IACAH,IACAd,GACJ,G","sources":["webpack://getterdunner/./src/newItem.service.js","webpack://getterdunner/./src/listRender.service.js","webpack://getterdunner/./src/listInterface.service.js","webpack://getterdunner/./src/index.js"],"sourcesContent":["// Create a factory function that creates new to-do items\n// It should take in a number of parameters such as \n//      name (r), details (o), tags (r) (which it can take multiple), \n\nexport function newTodo (name) {   \n    \n    // add in function parameters for \"details\" and \"tags\"\n\n    // let detailsProper = details ? details : '';\n    let isCompleted = false;\n\n    // in the return object add in properties for details and tags \n    // ...details : detailsProper, tags : tags\n\n    return {nameInput : name, isCompleted : isCompleted}\n} \n\nexport const parentListKeeper = (function () {\n\n    let parentList = [];\n    const add = (item) => parentList.push(item);\n    const remove = (item) => parentList.\n        splice(parentList.indexOf(item),1);\n\n    const print = () => console.table(parentList);\n\n    return {add, remove, print, parentList};\n  })();","import { parentListKeeper } from \"./newItem.service\";\n\n// This will export a function that will subdivide any list between things that have been completed and things that have not been completed \n\nexport function displayList() {\n\n    const completedList = [];\n    const todoList = []\n\n    for (let item in parentListKeeper.parentList) {\n        if (!item.isCompleted) todoList.push(item);\n        if (item.isCompleted) completedList.push(item);\n    }\n\n    const listDisplay = document.createElement('table');\n    listDisplay.setAttribute('id','todo-list');\n    \n    function printList(list) {\n        for (let item in list){\n            const itemRow = document.createElement('tr');\n            const checkBox = document.createElement('td');\n            // Add a clickable check box for the cell data\n\n            const itemDisplay = document.createElement('td');\n            itemDisplay.innerHTML = item.name; \n            // if (item.isCompleted) Add in code for strikethrough css styling;\n\n            itemRow.appendChild(checkBox);\n            itemRow.appendChild(itemDisplay);\n            listDisplay.appendChild(itemRow);\n        } \n    }\n\n    printList(todoList);\n    printList(completedList);\n}\n\nexport function clearList() {\n    const listDisplay = document.getElementById('todo-list');\n    if (listDisplay) {\n        listDisplay.replaceChildren();\n        listDisplay.remove();\n    }\n}","import { newTodo, parentListKeeper } from './newItem.service';\nimport { clearList, displayList } from './listRender.service';\n\nexport function createNewItemForm () {\n    \n    const content = document.getElementById(`content`);\n\n    const newItemForm = document.createElement(`form`);\n    newItemForm.setAttribute(`id`,`form`);\n    newItemForm.style.cssText = `display: flex; flex-direction: column; \n        flex-basis: 50px; margin: 10px`;\n\n    const itemExample = newTodo('example');\n    for (let key in itemExample) {\n\n        if (key.substring(key.length - 5, key.length) != 'Input') continue; \n\n        const newItemField = document.createElement(`input`);\n        newItemField.setAttribute(`id`, key);\n        newItemField.style.cssText = `width: 500px` ;\n        newItemForm.appendChild(newItemField);\n    \n        const newItemLabel = document.createElement('label');\n        newItemLabel.style.cssText = `width: 100px`;\n        newItemLabel.innerHTML = key;\n    }\n\n    const submitButton = document.createElement(`button`);\n    submitButton.setAttribute(`id`, `submit-button`)\n    submitButton.innerHTML = `Add New Todo` ;\n    submitButton.style.cssText = `width: 300px` ;\n\n    newItemForm.appendChild(submitButton)\n\n    content.appendChild(newItemForm);\n}\n\nexport function clearNewItemForm () {\n    const currentForm = document.getElementById('form');\n    if (!currentForm) return;\n    \n    currentForm.replaceChildren();\n    currentForm.remove()\n}\n\n\nexport function addNewItem() {\n    const newItemForm = document.getElementById('form');\n    const newItem = newTodo(newItemForm.nameInput.value);\n    \n    parentListKeeper.add(newItem);\n    parentListKeeper.print();\n\n    clearNewItemForm();\n    createNewItemForm();\n\n    clearList();\n    displayList();\n}","// Filler code\nimport { clearNewItemForm, createNewItemForm, addNewItem } from './listInterface.service.js';\nimport { displayList, clearList } from './listRender.service.js';\n\ncreateNewItemForm();\ndisplayList();\n\nconst submitButton =  document.getElementById('submit-button');\nsubmitButton.addEventListener('click', function(event) {\n    event.preventDefault();\n    \n    addNewItem();\n    clearNewItemForm();\n    createNewItemForm();\n    clearList();\n    displayList();\n})\n\n"],"names":["newTodo","name","nameInput","isCompleted","parentListKeeper","parentList","add","item","push","remove","splice","indexOf","print","console","table","displayList","completedList","todoList","listDisplay","document","createElement","printList","list","itemRow","checkBox","itemDisplay","innerHTML","appendChild","setAttribute","clearList","getElementById","replaceChildren","createNewItemForm","content","newItemForm","style","cssText","itemExample","key","substring","length","newItemField","newItemLabel","submitButton","clearNewItemForm","currentForm","addEventListener","event","preventDefault","newItem","value","addNewItem"],"sourceRoot":""}